name: Daily Subscription Converter

on:
  schedule:
    - cron: '30 5 * * *'
    - cron: '30 17 * * *'
  push:
  workflow_dispatch:

jobs:
  convert_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pull subconverter Docker image
        run: docker pull metacubex/subconverter:latest

      - name: Create base output directory
        run: mkdir -p output_configs

      - name: Install yq
        run: sudo apt-get update && sudo apt-get install -y yq

      - name: Read subconverter settings
        id: read_settings
        run: |
          SETTINGS_FILE="config/subconverter_settings.yml"
          ADVANCED_PARAMS=""

          if [ -f "$SETTINGS_FILE" ]; then
            PARAMS=( "emoji" "add_emoji" "remove_emoji" "append_type" "tfo" "udp" "list" "sort"
              "script" "insert" "scv" "fdn" "expand" "append_info" "prepend" "classic"
              "tls13" "new_name" "ua" "interval" "dev_id" "filename" "exclude" "include" "rename"
            )

            for param in "${PARAMS[@]}"; do
              VALUE=$(yq e ".$param" "$SETTINGS_FILE" 2>/dev/null)
              if [ "$VALUE" != "null" ] && [ -n "$VALUE" ]; then
                ENCODED_VALUE=$(python3 -c 'import urllib.parse; print(urllib.parse.quote(input(), safe=""))' <<< "$VALUE")
                ADVANCED_PARAMS+="&${param}=${ENCODED_VALUE}"
              fi
            done
            echo "ADVANCED_PARAMS=$ADVANCED_PARAMS" >> $GITHUB_OUTPUT
          else
            echo "ADVANCED_PARAMS=" >> $GITHUB_OUTPUT
          fi

      - name: Start subconverter Docker container
        run: |
          docker run -d -p 25500:25500 --name subconverter_instance metacubex/subconverter:latest
          echo "Waiting for subconverter to start..."
          sleep 10 

      - name: Process subscription files
        run: |
          INPUT_DIR="input_subs"
          OUTPUT_BASE_DIR="output_configs"
          ADVANCED_PARAMS="${{ steps.read_settings.outputs.ADVANCED_PARAMS }}"
          
          if [ ! -d "$INPUT_DIR" ]; then
            echo "No input_subs directory found."
            exit 0
          fi

          find "$INPUT_DIR" -maxdepth 1 -type f -name "*.txt" | while read sub_file; do
            TARGET_FORMAT=$(basename "$sub_file" | sed 's/\.txt$//')
            CURRENT_OUTPUT_DIR="${OUTPUT_BASE_DIR}/${TARGET_FORMAT}"
            mkdir -p "$CURRENT_OUTPUT_DIR"

            LINE_COUNT=0
            while IFS= read -r line; do
              LINE_COUNT=$((LINE_COUNT+1))
              trimmed_line=$(echo "$line" | xargs)
              if [ -n "$trimmed_line" ]; then
                if [[ "$trimmed_line" == *,* ]]; then
                  URL_TO_CONVERT_RAW=$(echo "$trimmed_line" | cut -d',' -f1)
                  CUSTOM_OUTPUT_BASE_NAME=$(echo "$trimmed_line" | cut -d',' -f2-)
                  CUSTOM_OUTPUT_BASE_NAME=$(echo "$CUSTOM_OUTPUT_BASE_NAME" | sed 's/[^a-zA-Z0-9._-]/_/g')
                  OUTPUT_FILENAME="${CUSTOM_OUTPUT_BASE_NAME}.yaml"
                else
                  URL_TO_CONVERT_RAW="$trimmed_line"
                  OUTPUT_FILENAME="${TARGET_FORMAT}_$(printf "%03d" $LINE_COUNT).yaml"
                fi

                if [[ "$URL_TO_CONVERT_RAW" =~ ^https?:// ]]; then
                  URL_TO_CONVERT=$(python3 -c 'import urllib.parse; print(urllib.parse.quote(input(), safe=""))' <<< "$URL_TO_CONVERT_RAW")
                  OUTPUT_FILE_PATH_IN_WORKSPACE="${CURRENT_OUTPUT_DIR}/${OUTPUT_FILENAME}"
                  FULL_API_URL="http://localhost:25500/sub?target=${TARGET_FORMAT}&url=${URL_TO_CONVERT}${ADVANCED_PARAMS}"
                  curl -s -S -o "$OUTPUT_FILE_PATH_IN_WORKSPACE" "$FULL_API_URL" || echo "Error converting link" > "$OUTPUT_FILE_PATH_IN_WORKSPACE"
                fi
              fi
            done < "$sub_file"
          done

      - name: Stop subconverter Docker container
        if: always()
        run: |
          docker stop subconverter_instance || true
          docker rm subconverter_instance || true

      - name: Generate README with output list
        run: |
          echo "## Converted Configs" > README.md
          echo "" >> README.md
          USER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          REPO=$(echo "${{ github.repository }}" | cut -d'/' -f2)

          find output_configs -type f -name "*.yaml" | sort | while read file; do
            REL_PATH=$(echo "$file" | sed 's|^output_configs/||')
            FILE_NAME=$(basename "$file")
            echo "${FILE_NAME}|https://raw.githubusercontent.com/${USER}/${REPO}/refs/heads/main/output_configs/${REL_PATH}" >> README.md
          done

      - name: Configure Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push changes
        run: |
          git add output_configs README.md
          git commit -m "Update converted configs and README list" || echo "No changes to commit"
          git push
